package kr.or.ddit.alarm.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.alarm.service.AlarmService;
import kr.or.ddit.alarm.vo.AlarmVO;
import kr.or.ddit.emp.vo.EmpVO;


@Controller
public class AlamnEchoController {

	
	private static final Logger logger = LoggerFactory.getLogger(AlamnEchoController.class);
	
	
	
	@Resource(name = "alarmService")
	private AlarmService alarmService;
	
	

	// 알림 받기 controller - 채팅 버전
	@RequestMapping("/alarm/chatRoomEmpList")
	public String alamnReceive(Model model, String chatRoomId) {
		
		try {
			List<String> empIdList =  alarmService.selectEmpIdList(chatRoomId);
			model.addAttribute("empIdList", empIdList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "jsonView";
	}
	
	
	
	
	
	
	
	
	@RequestMapping("/alarm/selectAlarmEmp")
	public String alarmInsert(Model model, HttpSession session) {
		
		
		EmpVO empVO = (EmpVO) session.getAttribute("EMP");
		
		try {
			List<AlarmVO> alarmInfoList = alarmService.selectAlarmInfoList(empVO.getEmpId());
			
			if(alarmInfoList != null) {
				model.addAttribute("alarmCnt", alarmInfoList.size());
			}else {
				model.addAttribute("alarmCnt", 0);
			}
			model.addAttribute("alarmList", alarmInfoList);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "jsonView";
	}
	
	
	
	
	
	@RequestMapping("/alarm/alarmChatInsert")
	public String alarmChatInsert(String chatRoomId, String alarmCont, HttpSession session) {
		
		logger.debug("chatRoomId : {}", chatRoomId);
		
		EmpVO empVO = (EmpVO) session.getAttribute("EMP");
		
		int insertAlarm  = alarmService.insertChatAlarm(chatRoomId, alarmCont, empVO.getEmpId());
		
		return "jsonView";
	}
	
	
	
	
	
	
	@RequestMapping("/alarm/alarmPostInsert")
	public String alarmPostInsert(HttpSession session, String receiverId, String alarmCont) {
		
		logger.debug("alarmCont : {}", alarmCont);
		
		// 보내는 사람
		EmpVO empVO = (EmpVO) session.getAttribute("EMP");
		
		String sender = empVO.getEmpId();
		
		try {
			int insertAlarm  = alarmService.insertPostAlarm(sender, receiverId, alarmCont);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "jsonView";
	}
	
	
	
	
	
	
	
	@RequestMapping("/alarm/alarmAllDel")
	public String alarmAllDel(HttpSession session) {
		
		
		EmpVO empVO = (EmpVO) session.getAttribute("EMP");
		
		try {
			int deleteMyAlarm = alarmService.updateMyAlarmStatus(empVO);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return "jsonView";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
}

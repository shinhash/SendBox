package kr.or.ddit.report.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import kr.or.ddit.comm.util.FileUtils;
import kr.or.ddit.comm.vo.FileVO;
import kr.or.ddit.report.dao.ReportMapperDao;
import kr.or.ddit.report.vo.ApprovLineCounterVO;
import kr.or.ddit.report.vo.ApprovLineListVO;
import kr.or.ddit.report.vo.ApprovLineVO;
import kr.or.ddit.report.vo.ApprovalVO;
import kr.or.ddit.report.vo.ReportFileVO;
import kr.or.ddit.report.vo.ReportTypeVO;
import kr.or.ddit.report.vo.ReportVO;

@Service("reportService")
public class ReportService {
	
	private static final Logger logger = LoggerFactory.getLogger(ReportService.class);
	
	@Resource(name="reportMapperDao")
	private ReportMapperDao reportMapperDao;

	public List<ReportVO> getRepostList(ReportVO reportVo) throws Exception {
		return reportMapperDao.getRepostList(reportVo);
	}

	public int selectReportTotCnt(ReportVO reportVo) throws Exception{
		return reportMapperDao.selectReportTotCnt(reportVo);
	}
	
	/**
	 * 기안문 양식을 모두 가져오는 메서드
	 * @return	기안문 양식 리스트
	 * @throws Exception
	 */
	public List<ReportTypeVO> selectReportTypeList() throws Exception{
		return reportMapperDao.selectReportTypeList();
	}

	
	/* 조직도 데이터 가져오는 메서드*/
	
	/**
	 * 사원이 등록한 결재선 목록을 가져오는 메서드
	 * @param approvLineVo		사원의 사원번호를 담은 VO 객체
	 * @return			결재선 목록
	 * @throws Exception
	 */
	public List<ApprovLineVO> selectApprovLineList(String empId) throws Exception {
		logger.debug("apprivLineVO 정보 : {}",empId);
		return reportMapperDao.selectApprovLineList(empId);
	}

	/**
	 * 결재선 종류별로 결재 횟수를 가져오는 메서드
	 * @param approvLineVo		사원의 사원번호를 담은 VO 객체
	 * @return				결재선 종류별 결재 횟수 정보를 담고 있는  VO 객체 리스트
	 */
	public List<ApprovLineCounterVO> selectApprLineCounterList(String empId){
		List<ApprovLineCounterVO> approvLineCounter = null;
		try {
			approvLineCounter = reportMapperDao.selectApprLineCounterList(empId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return approvLineCounter;
	}
	
	/**
	 * 사원이 선택한 결재선을 가져오는 메서드
	 * @param approvLineVo		결재선의 결재선 이름을 담은 ApprovLineVO
	 * @return					결재선 데이터
	 */

	public List<ApprovLineVO> selectApprovLine(ApprovLineVO approvLineVo) throws Exception {
		return reportMapperDao.selectApprovLine(approvLineVo);
	}

	/**
	 * 추가한 결재선을 db에 저장하는 메서드
	 * @param approvLineListVo		결재선 정보를 담은 Vo객체
	 * @return						추가된 로우 카운트
	 * @throws Exception
	 */
	public String insertApprovLine(ApprovLineListVO approvLineListVo){
		try {
			reportMapperDao.insertApprovLine(approvLineListVo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return approvLineListVo.getApprKind(); 
	}

	/**
	 * 사용자가 설정한 기안서 정보를 바탕으로 새로운 기안정보를  db에 등록하고 가져오는 메서드
	 * @param reportVo			사용자 설정 정보를 저장하고 있는 ReportVO 객체
	 * @return					새롭게 등록된 기안서 정보를 담고 있는  ReportVO 객체
	 */
	public ReportVO insertReport(ReportVO reportVo) {
		ReportVO report = null;
		try {
			reportMapperDao.insertReport(reportVo);
			report = reportMapperDao.selectReport(reportVo);
			report.setSignInfo(reportMapperDao.selectEmpSign(reportVo));
			ApprovLineVO approvLineVo = new ApprovLineVO();
			approvLineVo.setEmpId(report.getEmpId());
			approvLineVo.setApprKind(report.getApprKind());
			List<ApprovLineVO> approvLine = reportMapperDao.selectApprovLine(approvLineVo); 
			report.setApprovLineList(approvLine);
			report.setApprover(approvLine.get(0).getApprCurrEmp());
		}catch(Exception e) {
			e.printStackTrace();
		}
		return report;
				
	}

	public String insertReportComponent(ReportVO reportVo) {
		
		List<FileVO> fileList = FileUtils.createFileList(reportVo.getFileList());
		List<ReportFileVO> reportFileList = new ArrayList<ReportFileVO>();
		
		for (FileVO file : fileList ) {
			ReportFileVO reportFile = new ReportFileVO(file, reportVo.getReportId());
			reportFileList.add(reportFile);
		}
		reportVo.setReportFileList(reportFileList);
		reportVo.setReportSt("W");
		String result = "fail";
		try {
			reportMapperDao.updateReport(reportVo);
			reportMapperDao.insertReportSign(reportVo);
			reportMapperDao.insertReportFileList(reportVo);
			result = "success";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	public ReportVO selectReport(ReportVO reportVo) {
		ReportVO report = null;
		try {
			report = reportMapperDao.selectReport(reportVo);
			ApprovLineVO approvLineVo = new ApprovLineVO();
			approvLineVo.setApprKind(report.getApprKind());
			approvLineVo.setEmpId(report.getEmpId());
			List<ApprovLineVO> approvLineList = reportMapperDao.selectApprovLine(approvLineVo);
			report.setApprovLineList(approvLineList);
			report.setSignInfo(reportMapperDao.selectEmpSign(reportVo));
			report.setReportSignList(reportMapperDao.selectSignList(report));
			report.setReportFileList(reportMapperDao.selectReportFileList(report));
			report.setApprovalList(reportMapperDao.selectApprovalList(report));
		}catch(Exception e) {
			e.printStackTrace();
		}
		return report;
	}

	public List<ReportVO> selectReportList(ReportVO reportVo) {
		List<ReportVO> reportList = null;
		try {
			reportList = reportMapperDao.selectReportList(reportVo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return reportList;
	}

	/*public ReportVO insertApproval(ReportVO reportVo) {
		if("W".equals(reportVo.getReportSt())) {
			reportVo.setReportSt("ing");
		}
		if(reportVo.getApprover().equals(reportVo.getNextApprover()) && )

		
		reportMapperDao.insertApproval(reportVo);
		return null;
	}*/

	public ReportVO insertApproval(ApprovalVO approvalVo) {
		
		//결재자와 다음 결재자 정보가 동일한지 확인, 최종 결재자인지 확인
		if(approvalVo.getEmpId().equals(approvalVo.getNextApprover())) {
			approvalVo.setReportSt("Y");
		}else {
			approvalVo.setReportSt("ing");
		}
		
		if("N".equals(approvalVo.getApprovResult())){
			approvalVo.setReportSt("N");
		}
		
		try {
			reportMapperDao.insertApproval(approvalVo);
			reportMapperDao.insertReportSign(approvalVo);
			reportMapperDao.updateReport(approvalVo);			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ReportFileVO selectReportFile(ReportFileVO reportFileVo) {
		ReportFileVO reportFile = null;
		try {
			reportFile = reportMapperDao.selectReportFile(reportFileVo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return reportFile;
	}
	
}

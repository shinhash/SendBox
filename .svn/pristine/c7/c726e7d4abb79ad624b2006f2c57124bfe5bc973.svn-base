package kr.or.ddit.business.library.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FilenameUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartRequest;

import kr.or.ddit.business.library.service.LibService;
import kr.or.ddit.business.library.vo.LibEmpVO;
import kr.or.ddit.business.library.vo.LibVO;
import kr.or.ddit.emp.controller.FileUploadUtil;
import kr.or.ddit.emp.vo.EmpVO;

@Controller
public class LibraryController {
   
   private static final Logger logger = LoggerFactory.getLogger(LibraryController.class);
   
   @Resource(name = "libService")
   private LibService libService;
   
   @RequestMapping("/library")
   public String libraryList(Model model, LibVO libVO, HttpSession session, String libraryId, String keyword) {
      
      EmpVO empVO = (EmpVO)session.getAttribute("EMP");
      logger.debug("empVO : {}", empVO);
      logger.debug("libraryId : {}", libraryId);
      logger.debug("검색할거 : {}",keyword);
      libVO.setLibraryId(libraryId);
      libVO.setSearchKeyword(keyword);
      try {
         List<LibVO> libList = libService.libList(libVO);
         logger.debug("===================================자료실===========================================");
         logger.debug("");
         logger.debug("");
         logger.debug("libList : {}", libList);
         logger.debug("리스트 사이즈 : {}",libList.size());
         logger.debug("");
         logger.debug("");
         logger.debug("=================================================================================");
         model.addAttribute("libList", libList);
         model.addAttribute("libraryId", libraryId);
         
         List<LibVO> folders = libService.folderList(libVO);
         model.addAttribute("folders", folders);
      } catch (Exception e) {
         e.printStackTrace();
      }
      return "tiles/library/library";
   }
   
   //left.jsp
   @RequestMapping(path="/selectLib")
   public String selectLib(LibEmpVO libEmpVO, Model model) {
      logger.debug("libEmpVO : {}", libEmpVO);
      
      List<LibEmpVO> libList = null;
      try {
         libList = libService.libSelect(libEmpVO);
         logger.debug("libList 사이즈 : {}", libList.size());
      } catch (Exception e) {
         e.printStackTrace();
      }
      model.addAttribute("libList", libList);
      return "jsonView";
   }
   
   @RequestMapping("/fileUpload")
   public String fileUpload(LibVO libVO,Model model, HttpServletRequest files, HttpSession session) {
      logger.debug("fileUpload");
      
      logger.debug("libVO1 : {}", libVO);
      List<MultipartFile> list = (List<MultipartFile>) ((MultipartRequest) files).getFiles("realfilename");
      logger.debug("개수 : {}", list.size());
      
      String filename = "";
      String filePath = "";
      String extension = "";
      int par = 0;
      for (int i = 0; i < list.size(); i++) {
         if (list.get(i).getOriginalFilename() != null && !(list.get(i).getOriginalFilename().equals(""))) {
            logger.debug("extension : {}", FilenameUtils.getExtension(list.get(i).getOriginalFilename()));
            logger.debug("tempPath : {}", FilenameUtils.getPath(list.get(i).getOriginalFilename()));
            logger.debug("name : {}", FilenameUtils.getName(list.get(i).getOriginalFilename()));
            filename = UUID.randomUUID().toString();
            extension = FileUploadUtil.getExtension(list.get(i).getOriginalFilename());
            logger.debug("확장자 : {}", extension);
            filePath = "D:\\files\\" + filename + "." + extension;
            File uploadFile = new File(filePath);
            try {
               list.get(i).transferTo(uploadFile);
            } catch (IllegalStateException | IOException e) {
               e.printStackTrace();
            }
         
         EmpVO sessionEmpVO = (EmpVO)session.getAttribute("EMP");
         libVO.setEmpId(sessionEmpVO.getEmpId());
         libVO.setFileRealNm(list.get(i).getOriginalFilename());
         libVO.setFilePath(filePath);
         libVO.setFileIconId(FilenameUtils.getExtension(list.get(i).getOriginalFilename()));
         libVO.setParFileId(libVO.getParFileId());
         par = libVO.getParFileId();
         libVO.setDeptId(sessionEmpVO.getDeptId());
         libVO.setFileType(extension);
         logger.debug("파일타입 : {}",extension);
         libVO.setFileSize(Math.round((list.get(i).getSize())/1024)*100/100+"KB");
         libVO.setFileFolder("F");
         logger.debug("libVO2 : {}", libVO);
         
         try {
            int uploadCnt = libService.fileUpload(libVO);
            logger.debug("uploadCnt:{}", uploadCnt);
         } catch (Exception e) {
            e.printStackTrace();
         }
            
         }
      }
      
      
      if(par != 0) {
         return "redirect:folderSearch?fileSeq="+par;
      }else {
         return "redirect:/library?libraryId="+ libVO.getLibraryId();
      }
      
   }
   
   @RequestMapping("/deleteFile")
   public String deleteFile(String fileSeq2) {
      logger.debug("fileSeq2 ? {}",fileSeq2);
      String[] fileSeqArray = fileSeq2.split(",");
      logger.debug("스트링 사이즈 : {}",fileSeqArray.length);
      
      HashMap<String, Integer> duplicate_count = new HashMap<String, Integer>();
      
      for (int i = 0; i < fileSeqArray.length; i++) {
         if (duplicate_count.containsKey(fileSeqArray[i])) { // HashMap 내부에 이미 key 값이 존재하는지 확인
            duplicate_count.put(fileSeqArray[i], duplicate_count.get(fileSeqArray[i]) + 1); // key가 이미
         } else { // key값이 존재하지 않으면
            duplicate_count.put(fileSeqArray[i], 1); // key 값을 생성후 value를 1로 초기화
         }
      }
      System.out.println(duplicate_count);
      
      for(String key : duplicate_count.keySet()) {
         if(duplicate_count.get(key) % 2 == 1) {
            LibVO libVO = new LibVO();
            System.out.println("홀수번 클릭 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            System.out.println(key);
            int fileSeq = Integer.parseInt(key);
            libVO.setFileSeq(fileSeq);
            try {
               libService.deleteFile(libVO);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
      }
      return "jsonView";
   }
   
   @RequestMapping("/libFileDownload")
   public String LibFileDownloadView(LibVO libVO, Model model) {
      logger.debug("libVO : {}", libVO);
      if (libVO.getFileSeq() != 0) {
         try {
            libVO = libService.fileSelect(libVO);
            logger.debug("libVO2 : {}", libVO);
         } catch (Exception e) {
            e.printStackTrace();
         }
         model.addAttribute("fileVO", libVO);
         return "LibFileDownloadView";
      }
      return "redirect:/library?libraryId="+ libVO.getLibraryId();
   }
   
   @RequestMapping("/folderUpload")
   public String folderUpload(LibVO libVO, HttpSession session, Model model) {
      logger.debug("folderUpload");
      EmpVO sessionVO = (EmpVO)session.getAttribute("EMP");
      libVO.setEmpId(sessionVO.getEmpId());
      libVO.setFilePath("D:\\sendbox\\"+libVO.getFileRealNm()+"\\");
      logger.debug("folderLibVO : {}", libVO);
      try {
         int cnt = libService.folderUpload(libVO);
         logger.debug("cnt : {}", cnt);
      } catch (Exception e) {
         e.printStackTrace();
      }
      
      if(libVO.getParFileId() == 0) {
         return "redirect:/library?libraryId="+ libVO.getLibraryId();
      }else {
         return "redirect:/folderSearch?fileSeq="+libVO.getParFileId();
      }
      
      
   }
   
   @RequestMapping("/folderSearch")
   public String folderSearch(Model model,LibVO libVO){
      logger.debug("folderSearch");
      logger.debug("libVO : {}", libVO);
      List<LibVO> folderList = null;
      LibVO vo = new LibVO();
      try {
         folderList = libService.folderSearch(libVO);
         logger.debug("리스트 사이즈 ==> {}", folderList.size());
         vo = libService.fileSelect(libVO);
         List<LibVO> folders = libService.folderList(libVO);
         model.addAttribute("folders", folders);
      } catch (Exception e) {
         e.printStackTrace();
      }
      model.addAttribute("folderList", folderList);
      logger.debug("folderList : {}", folderList);
      model.addAttribute("vo", vo);
      
      
      return "tiles/library/folderImgView";
   }
   
   @RequestMapping("/fileChangeName")
   public String fileChangeName(LibVO libVO) {
      logger.debug("libVO : {}", libVO);
      try {
         int cnt = libService.fileChange(libVO);
      } catch (Exception e) {
         e.printStackTrace();
      }
      
      if(!libVO.getLibraryId().equals("NO")) {
         return "redirect:/library?libraryId="+ libVO.getLibraryId();
      }else {
         return "redirect:folderSearch?fileSeq="+libVO.getParFileId();
      }
   }
   
   @RequestMapping("/copyFile")
   public String copyFile(String fileSeq2) {
      String[] fileSeqArray = fileSeq2.split(",");
      
      HashMap<String, Integer> duplicate_count = new HashMap<String, Integer>();
      
      for (int i = 0; i < fileSeqArray.length; i++) {
         if (duplicate_count.containsKey(fileSeqArray[i])) { // HashMap 내부에 이미 key 값이 존재하는지 확인
            duplicate_count.put(fileSeqArray[i], duplicate_count.get(fileSeqArray[i]) + 1); // key가 이미
         } else { // key값이 존재하지 않으면
            duplicate_count.put(fileSeqArray[i], 1); // key 값을 생성후 value를 1로 초기화
         }
      }
      System.out.println(duplicate_count);
      
      for(String key : duplicate_count.keySet()) {
         if(duplicate_count.get(key) % 2 == 1) {
            LibVO libVO = new LibVO();
            int fileSeq = Integer.parseInt(key);
            libVO.setFileSeq(fileSeq);
            try {
               libVO = libService.fileSelect(libVO);
               String fileName = libVO.getFileRealNm();
               logger.debug("fileName : {}",fileName);
               String[] fileNameArray = fileName.split("[.]");
               System.out.println("********************************************");
               logger.debug("사이즈 : {}",fileNameArray.length);
               int length = fileNameArray.length;
               libVO.setFileRealNm(fileNameArray[0]+"의 사본."+fileNameArray[length-1]);
               libService.fileUpload(libVO);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
      }
      return "jsonView";
   }
   
   @RequestMapping("/fileMove")
   public String fileMove(LibVO libVO) {
      logger.debug("fileMove : {}", libVO);
      try {
         int cnt = libService.fileChange(libVO);
      } catch (Exception e) {
         e.printStackTrace();
      }
      
      return "redirect:/library?libraryId="+libVO.getLibraryId();
   }
   
   @RequestMapping("/fileListView")
   public String fileListView(Model model, LibVO libVO, HttpSession session, String libraryId) {
      
      EmpVO empVO = (EmpVO)session.getAttribute("EMP");
      logger.debug("empVO : {}", empVO);
      logger.debug("libVO2222222222222222 : {}", libVO);
      libVO.setLibraryId(libraryId);
      String dataSize = "";
      String total = "1000024";
      
      try {
         List<LibVO> libList = libService.libFileList(libVO);
         logger.debug("libList : {}", libList);
         logger.debug("리스트 사이즈 : {}",libList.size());
         model.addAttribute("libList", libList);
         model.addAttribute("libraryId", libraryId);
         
         List<LibVO> folders = libService.folderList(libVO);
         model.addAttribute("folders", folders);
         
         dataSize = libService.libFileSize(libVO);
         logger.debug("dataSize : {}",dataSize);
         model.addAttribute("total", total);
         model.addAttribute("dataSize", dataSize);
      } catch (Exception e) {
         e.printStackTrace();
      }
         
      return "library/libraryListView";
   }
   
   @RequestMapping("/fileDrop")
   public String dataSize() {
      return "tiles/library/fileDrop";
   }
   
   
}